
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
}

model Category {
  id                Int    @id @default(autoincrement())
  name              String
  description       String
  slug              String @unique
  thumbnail         String?
  posts             PostCategory[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("category")
}


model PostCategory {
   id                     Int    @id @default(autoincrement())
   postId                 Int
   post                   Post   @relation(fields: [postId] , references: [id])
   categoryId             Int
   category               Category    @relation(fields: [categoryId] , references: [id])   

   createdAt              DateTime @default(now())
   updatedAt              DateTime @updatedAt

   @@map("post_category")
}



model Post {
    id              Int      @id @default(autoincrement())
    title           String   
    description     String
    content         String
    thumbnail       String
    slug            String   @unique

    status          EPostStatus @default(Draft)
    publishAt       DateTime? 

    categories      PostCategory[]
    tags            String[]

    priority       Int              @default(0)

    comments        Comment[]

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    view            Int @default(0)

    @@map("post")
}

model Comment {
  
  id        Int      @id @default(autoincrement())
  name      String   
  email     String      
  content   String   
  website   String?

  status    ECommentStatus @default(NotApprove)

  replyToId Int?     
  replyTo   Comment? @relation(name: "CommentReplies", fields: [replyToId], references: [id])
  replies   Comment[] @relation(name: "CommentReplies")

  postId    Int
  post      Post     @relation(fields: [postId], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("comment")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String   
  email     String      
  content   String?   
  phone     String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("contact")
}

enum EPostStatus {
    Draft
    Publish
}


enum ECommentStatus {
    NotApprove
    Approved
}

